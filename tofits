#!/usr/bin/env perl

use Astro::FITS::CFITSIO qw ( :longnames :constants );


# Read plain ASCII data dump from stdin
my $i = 0; my $j = 0; my $k = 0; my $nx = 0; my $ny = 0;
my ($x0, $dx, $y0, $dy); my @data = (); my @format = (); my @header = ();

while (<>) {
	chomp;
	if (/^# OUTPUT:\s+(.*);/) { @format = split /,\s*/, $1; next; }
	if (/^#\s*(.*)$/) { push @header, $1; next; }
	if (/^\s*$/) { next unless $i; $j++; $i=0; next; }
	
	my ($y, $x, @d) = split;
	
	$x0 = $x if ($i == 0); $dx = $x-$x0 if ($i == 1);
	$y0 = $y if ($j == 0); $dy = $y-$y0 if ($j == 1);
	
	for ($f = 0; $f <= $#d; $f++) { push @{$data[$f]}, $d[$f]; }
	
	$i++; $k++; $nx = $i if ($i>$nx);
}
$ny = $j;

print STDERR "Warning: $k points in ${nx}x${ny} array read - input might be malformed!\n" if ($k!=$nx*$ny);


# Write out the FITS image file
my $fp, $status; my $file = @ARGV ? shift : "smpout.fit";

fits_create_file($fp, '!' . $file, $status);
#fits_set_compression_type($fp, RICE_1, $status);
for ($i = 0; $i <= $#data; $i++) {
	fits_create_img($fp, FLOAT_IMG, 2, [$nx, $ny], $status);
	foreach $c (@header) { fits_write_comment($fp, $c, $status); }
	fits_update_key($fp, TSTRING, "EXTNAME", $format[$i+2] . "($format[1],$format[0])", undef, $status) if defined $format[$i+2];
	fits_update_key($fp, TFLOAT, "CRVAL1", $x0-$dx, undef, $status);
	fits_update_key($fp, TFLOAT, "CDELT1", $dx, undef, $status);
	fits_update_key($fp, TFLOAT, "CRVAL2", $y0-$dy, undef, $status);
	fits_update_key($fp, TFLOAT, "CDELT2", $dy, undef, $status);
	fits_write_img($fp, TFLOAT, 1, $nx*$ny, $data[$i], $status);
}
fits_close_file($fp, $status);

print STDERR "Error $status writing FITS file '$file'!\n" if $status;
